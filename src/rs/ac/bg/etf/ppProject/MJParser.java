
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 15 21:47:36 CEST 2016
//----------------------------------------------------

package rs.ac.bg.etf.ppProject;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;
import rs.etf.pp1.symboltable.visitors.DumpSymbolTableVisitor;
import rs.etf.pp1.symboltable.structure.SymbolDataStructure;
import rs.etf.pp1.symboltable.structure.HashTableDataStructure;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Collection;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Reader;
import rs.etf.pp1.mj.runtime.Code;
import rs.etf.pp1.symboltable.visitors.SymbolTableVisitor;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 15 21:47:36 CEST 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\010\000\002\002\004\000\002\066" +
    "\003\000\002\005\003\000\002\005\002\000\002\003\004" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\067\003\000\002\006" +
    "\010\000\002\006\005\000\002\110\002\000\002\006\013" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\007\000\002" +
    "\111\002\000\002\034\010\000\002\112\002\000\002\034" +
    "\011\000\002\113\002\000\002\034\012\000\002\034\011" +
    "\000\002\037\003\000\002\037\002\000\002\040\005\000" +
    "\002\040\003\000\002\041\003\000\002\041\005\000\002" +
    "\035\005\000\002\035\006\000\002\035\005\000\002\044" +
    "\003\000\002\044\005\000\002\045\005\000\002\045\003" +
    "\000\002\011\005\000\002\011\007\000\002\011\006\000" +
    "\002\046\004\000\002\046\002\000\002\036\004\000\002" +
    "\036\003\000\002\050\003\000\002\050\002\000\002\101" +
    "\004\000\002\012\005\000\002\012\007\000\002\012\007" +
    "\000\002\055\003\000\002\055\004\000\002\051\004\000" +
    "\002\051\003\000\002\057\006\000\002\057\005\000\002" +
    "\052\003\000\002\052\003\000\002\056\005\000\002\053" +
    "\004\000\002\054\003\000\002\073\003\000\002\030\003" +
    "\000\002\030\002\000\002\013\004\000\002\013\003\000" +
    "\002\031\004\000\002\031\003\000\002\102\003\000\002" +
    "\102\003\000\002\043\004\000\002\043\003\000\002\042" +
    "\004\000\002\042\004\000\002\064\007\000\002\047\005" +
    "\000\002\063\004\000\002\063\003\000\002\062\006\000" +
    "\002\062\005\000\002\114\002\000\002\115\002\000\002" +
    "\032\013\000\002\116\002\000\002\014\012\000\002\033" +
    "\003\000\002\033\002\000\002\015\005\000\002\015\006" +
    "\000\002\015\003\000\002\016\004\000\002\016\006\000" +
    "\002\017\003\000\002\017\002\000\002\020\004\000\002" +
    "\020\003\000\002\021\003\000\002\021\003\000\002\060" +
    "\004\000\002\060\003\000\002\061\004\000\002\022\006" +
    "\000\002\022\007\000\002\071\004\000\002\023\006\000" +
    "\002\023\006\000\002\023\007\000\002\023\007\000\002" +
    "\023\005\000\002\023\005\000\002\023\007\000\002\023" +
    "\005\000\002\023\006\000\002\023\004\000\002\023\004" +
    "\000\002\023\005\000\002\023\007\000\002\023\007\000" +
    "\002\023\011\000\002\023\005\000\002\070\004\000\002" +
    "\072\004\000\002\024\003\000\002\024\002\000\002\104" +
    "\005\000\002\104\003\000\002\077\003\000\002\025\005" +
    "\000\002\025\003\000\002\026\005\000\002\026\003\000" +
    "\002\027\003\000\002\027\005\000\002\065\004\000\002" +
    "\065\003\000\002\074\005\000\002\074\003\000\002\075" +
    "\005\000\002\075\003\000\002\076\003\000\002\076\006" +
    "\000\002\076\003\000\002\076\003\000\002\076\003\000" +
    "\002\076\003\000\002\076\004\000\002\076\007\000\002" +
    "\076\005\000\002\103\005\000\002\117\002\000\002\103" +
    "\007\000\002\103\006\000\002\103\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\106\003\000\002" +
    "\106\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\004\025\005\001\002\000\004\002\u0137\001" +
    "\002\000\004\053\006\001\002\000\012\004\uffff\037\uffff" +
    "\042\uffff\053\uffff\001\002\000\012\004\ufffd\037\022\042" +
    "\023\053\013\001\002\000\004\004\u0128\001\002\000\006" +
    "\003\u0109\053\u010a\001\002\000\012\004\ufffb\037\ufffb\042" +
    "\ufffb\053\ufffb\001\002\000\054\003\uffbc\004\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\050\uffbc\051\uffbc\053\uffbc\001\002\000" +
    "\006\003\365\053\013\001\002\000\012\004\ufff8\037\ufff8" +
    "\042\ufff8\053\ufff8\001\002\000\006\004\026\040\027\001" +
    "\002\000\012\004\ufffe\037\022\042\023\053\013\001\002" +
    "\000\012\004\ufff9\037\ufff9\042\ufff9\053\ufff9\001\002\000" +
    "\012\004\ufffa\037\ufffa\042\ufffa\053\ufffa\001\002\000\004" +
    "\053\024\001\002\000\006\003\ufff3\053\ufff3\001\002\000" +
    "\006\004\uffcb\040\uffcb\001\002\000\012\004\ufffc\037\ufffc" +
    "\042\ufffc\053\ufffc\001\002\000\010\004\uffcc\005\uffcc\053" +
    "\013\001\002\000\006\003\031\053\013\001\002\000\004" +
    "\004\361\001\002\000\004\004\032\001\002\000\010\004" +
    "\uffcc\005\uffcc\053\013\001\002\000\006\003\350\053\321" +
    "\001\002\000\004\005\uffc0\001\002\000\006\004\051\005" +
    "\uffbd\001\002\000\012\004\uffc7\037\uffc7\042\uffc7\053\uffc7" +
    "\001\002\000\004\005\uffc1\001\002\000\010\004\uffcd\005" +
    "\uffcd\053\013\001\002\000\012\004\uffc8\037\uffc8\042\uffc8" +
    "\053\uffc8\001\002\000\010\004\uffce\005\uffce\053\uffce\001" +
    "\002\000\004\005\045\001\002\000\012\004\uffc4\037\uffc4" +
    "\042\uffc4\053\uffc4\001\002\000\012\004\uffc6\037\uffc6\042" +
    "\uffc6\053\uffc6\001\002\000\012\004\uffc5\037\uffc5\042\uffc5" +
    "\053\uffc5\001\002\000\010\004\uffcf\005\uffcf\053\uffcf\001" +
    "\002\000\004\005\uffbe\001\002\000\006\041\055\053\013" +
    "\001\002\000\004\053\uffb5\001\002\000\010\005\346\041" +
    "\055\053\013\001\002\000\010\005\uffb8\041\uffb8\053\uffb8" +
    "\001\002\000\004\053\uffb4\001\002\000\004\053\057\001" +
    "\002\000\004\006\060\001\002\000\006\007\uffa3\053\013" +
    "\001\002\000\006\003\342\053\075\001\002\000\006\004" +
    "\uffa6\053\uffa6\001\002\000\006\007\uffa4\016\070\001\002" +
    "\000\006\004\uffac\053\uffac\001\002\000\004\007\067\001" +
    "\002\000\006\007\uffa0\016\uffa0\001\002\000\006\004\uffad" +
    "\053\uffad\001\002\000\006\003\072\053\013\001\002\000" +
    "\004\053\075\001\002\000\004\007\074\001\002\000\006" +
    "\007\uffa2\016\uffa2\001\002\000\006\004\uffab\053\uffab\001" +
    "\002\000\010\007\uff9f\010\076\016\uff9f\001\002\000\004" +
    "\011\077\001\002\000\006\007\uff9e\016\uff9e\001\002\000" +
    "\006\004\uffd0\053\uffd0\001\002\000\006\004\314\053\013" +
    "\001\002\000\024\004\uffb2\005\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\044\uffb2\046\uffb2\047\uffb2\053\uffb2\001\002\000\024" +
    "\004\106\005\uff9c\026\104\027\121\030\117\044\115\046" +
    "\122\047\105\053\107\001\002\000\004\006\307\001\002" +
    "\000\004\006\306\001\002\000\024\004\106\005\uff9c\026" +
    "\104\027\121\030\117\044\115\046\122\047\105\053\107" +
    "\001\002\000\060\006\uff61\007\uff61\010\uff61\011\uff61\012" +
    "\uff61\013\uff61\014\uff61\015\uff61\016\uff61\017\uff61\020\uff61" +
    "\021\uff61\022\uff61\023\uff61\024\uff61\031\uff61\032\uff61\033" +
    "\uff61\034\uff61\035\uff61\036\uff61\050\uff61\051\uff61\001\002" +
    "\000\024\004\uff98\005\uff98\026\uff98\027\uff98\030\uff98\044" +
    "\uff98\046\uff98\047\uff98\053\uff98\001\002\000\024\004\106" +
    "\005\uff9d\026\104\027\121\030\117\044\115\046\122\047" +
    "\105\053\107\001\002\000\016\006\266\010\154\014\264" +
    "\017\156\023\265\024\263\001\002\000\004\005\262\001" +
    "\002\000\024\003\247\006\137\013\124\043\126\052\130" +
    "\053\107\054\135\055\132\056\133\001\002\000\004\006" +
    "\212\001\002\000\024\004\uff9a\005\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\044\uff9a\046\uff9a\047\uff9a\053\uff9a\001\002\000" +
    "\004\006\202\001\002\000\024\004\uff99\005\uff99\026\uff99" +
    "\027\uff99\030\uff99\044\uff99\046\uff99\047\uff99\053\uff99\001" +
    "\002\000\024\006\137\013\124\015\131\043\126\052\130" +
    "\053\107\054\135\055\132\056\133\001\002\000\004\015" +
    "\123\001\002\000\026\004\uff88\005\uff88\026\uff88\027\uff88" +
    "\030\uff88\044\uff88\045\uff88\046\uff88\047\uff88\053\uff88\001" +
    "\002\000\020\006\137\043\126\052\130\053\107\054\135" +
    "\055\132\056\133\001\002\000\010\012\143\013\144\015" +
    "\200\001\002\000\004\053\013\001\002\000\052\006\155" +
    "\007\uff6e\010\154\011\uff6e\012\uff6e\013\uff6e\015\uff6e\016" +
    "\uff6e\017\156\020\uff6e\021\uff6e\022\uff6e\031\uff6e\032\uff6e" +
    "\033\uff6e\034\uff6e\035\uff6e\036\uff6e\050\uff6e\051\uff6e\001" +
    "\002\000\044\007\uff6c\011\uff6c\012\uff6c\013\uff6c\015\uff6c" +
    "\016\uff6c\020\uff6c\021\uff6c\022\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\050\uff6c\051\uff6c\001\002" +
    "\000\026\004\uff87\005\uff87\026\uff87\027\uff87\030\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\053\uff87\001\002\000\044" +
    "\007\uff6a\011\uff6a\012\uff6a\013\uff6a\015\uff6a\016\uff6a\020" +
    "\uff6a\021\uff6a\022\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\050\uff6a\051\uff6a\001\002\000\044\007" +
    "\uff69\011\uff69\012\uff69\013\uff69\015\uff69\016\uff69\020\uff69" +
    "\021\uff69\022\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035" +
    "\uff69\036\uff69\050\uff69\051\uff69\001\002\000\044\007\uff73" +
    "\011\uff73\012\uff73\013\uff73\015\uff73\016\uff73\020\150\021" +
    "\151\022\147\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73" +
    "\036\uff73\050\uff73\051\uff73\001\002\000\044\007\uff6b\011" +
    "\uff6b\012\uff6b\013\uff6b\015\uff6b\016\uff6b\020\uff6b\021\uff6b" +
    "\022\uff6b\031\uff6b\032\uff6b\033\uff6b\034\uff6b\035\uff6b\036" +
    "\uff6b\050\uff6b\051\uff6b\001\002\000\044\007\uff6f\011\uff6f" +
    "\012\uff6f\013\uff6f\015\uff6f\016\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\050\uff6f\051\uff6f\001\002\000\022\006\137\013\124\043" +
    "\126\052\130\053\107\054\135\055\132\056\133\001\002" +
    "\000\036\007\uff71\011\uff71\012\uff71\013\uff71\015\uff71\016" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71" +
    "\050\uff71\051\uff71\001\002\000\010\007\142\012\143\013" +
    "\144\001\002\000\044\007\uff66\011\uff66\012\uff66\013\uff66" +
    "\015\uff66\016\uff66\020\uff66\021\uff66\022\uff66\031\uff66\032" +
    "\uff66\033\uff66\034\uff66\035\uff66\036\uff66\050\uff66\051\uff66" +
    "\001\002\000\020\006\uff5a\043\uff5a\052\uff5a\053\uff5a\054" +
    "\uff5a\055\uff5a\056\uff5a\001\002\000\020\006\uff59\043\uff59" +
    "\052\uff59\053\uff59\054\uff59\055\uff59\056\uff59\001\002\000" +
    "\020\006\137\043\126\052\130\053\107\054\135\055\132" +
    "\056\133\001\002\000\044\007\uff72\011\uff72\012\uff72\013" +
    "\uff72\015\uff72\016\uff72\020\150\021\151\022\147\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\050\uff72\051" +
    "\uff72\001\002\000\020\006\uff56\043\uff56\052\uff56\053\uff56" +
    "\054\uff56\055\uff56\056\uff56\001\002\000\020\006\uff58\043" +
    "\uff58\052\uff58\053\uff58\054\uff58\055\uff58\056\uff58\001\002" +
    "\000\020\006\uff57\043\uff57\052\uff57\053\uff57\054\uff57\055" +
    "\uff57\056\uff57\001\002\000\020\006\137\043\126\052\130" +
    "\053\107\054\135\055\132\056\133\001\002\000\044\007" +
    "\uff70\011\uff70\012\uff70\013\uff70\015\uff70\016\uff70\020\uff70" +
    "\021\uff70\022\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035" +
    "\uff70\036\uff70\050\uff70\051\uff70\001\002\000\024\003\167" +
    "\006\uff64\013\uff64\043\uff64\052\uff64\053\uff64\054\uff64\055" +
    "\uff64\056\uff64\001\002\000\024\006\137\007\uff7e\013\124" +
    "\043\126\052\130\053\107\054\135\055\132\056\133\001" +
    "\002\000\004\053\157\001\002\000\060\006\uff65\007\uff65" +
    "\010\uff65\011\uff65\012\uff65\013\uff65\014\uff65\015\uff65\016" +
    "\uff65\017\uff65\020\uff65\021\uff65\022\uff65\023\uff65\024\uff65" +
    "\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036\uff65\050" +
    "\uff65\051\uff65\001\002\000\006\007\uff7f\016\165\001\002" +
    "\000\006\007\uff7c\016\uff7c\001\002\000\012\007\uff7b\012" +
    "\143\013\144\016\uff7b\001\002\000\004\007\164\001\002" +
    "\000\044\007\uff6d\011\uff6d\012\uff6d\013\uff6d\015\uff6d\016" +
    "\uff6d\020\uff6d\021\uff6d\022\uff6d\031\uff6d\032\uff6d\033\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\050\uff6d\051\uff6d\001\002\000" +
    "\022\006\137\013\124\043\126\052\130\053\107\054\135" +
    "\055\132\056\133\001\002\000\006\007\uff7d\016\uff7d\001" +
    "\002\000\004\011\173\001\002\000\022\006\137\013\124" +
    "\043\126\052\130\053\107\054\135\055\132\056\133\001" +
    "\002\000\010\011\172\012\143\013\144\001\002\000\060" +
    "\006\uff63\007\uff63\010\uff63\011\uff63\012\uff63\013\uff63\014" +
    "\uff63\015\uff63\016\uff63\017\uff63\020\uff63\021\uff63\022\uff63" +
    "\023\uff63\024\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035" +
    "\uff63\036\uff63\050\uff63\051\uff63\001\002\000\060\006\uff62" +
    "\007\uff62\010\uff62\011\uff62\012\uff62\013\uff62\014\uff62\015" +
    "\uff62\016\uff62\017\uff62\020\uff62\021\uff62\022\uff62\023\uff62" +
    "\024\uff62\031\uff62\032\uff62\033\uff62\034\uff62\035\uff62\036" +
    "\uff62\050\uff62\051\uff62\001\002\000\046\007\uff68\010\175" +
    "\011\uff68\012\uff68\013\uff68\015\uff68\016\uff68\020\uff68\021" +
    "\uff68\022\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68" +
    "\036\uff68\050\uff68\051\uff68\001\002\000\022\006\137\013" +
    "\124\043\126\052\130\053\107\054\135\055\132\056\133" +
    "\001\002\000\010\011\177\012\143\013\144\001\002\000" +
    "\044\007\uff67\011\uff67\012\uff67\013\uff67\015\uff67\016\uff67" +
    "\020\uff67\021\uff67\022\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\050\uff67\051\uff67\001\002\000\026" +
    "\004\uff86\005\uff86\026\uff86\027\uff86\030\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\053\uff86\001\002\000\044\007\uff74" +
    "\011\uff74\012\uff74\013\uff74\015\uff74\016\uff74\020\150\021" +
    "\151\022\147\031\uff74\032\uff74\033\uff74\034\uff74\035\uff74" +
    "\036\uff74\050\uff74\051\uff74\001\002\000\022\006\137\013" +
    "\124\043\126\052\130\053\107\054\135\055\132\056\133" +
    "\001\002\000\012\007\205\012\143\013\144\016\204\001" +
    "\002\000\004\052\207\001\002\000\004\015\206\001\002" +
    "\000\026\004\uff84\005\uff84\026\uff84\027\uff84\030\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\053\uff84\001\002\000\004" +
    "\007\210\001\002\000\004\015\211\001\002\000\026\004" +
    "\uff83\005\uff83\026\uff83\027\uff83\030\uff83\044\uff83\045\uff83" +
    "\046\uff83\047\uff83\053\uff83\001\002\000\024\003\217\006" +
    "\137\013\124\043\126\052\130\053\107\054\135\055\132" +
    "\056\133\001\002\000\010\007\uff77\050\uff77\051\uff77\001" +
    "\002\000\030\007\uff76\012\143\013\144\031\241\032\236" +
    "\033\243\034\244\035\242\036\237\050\uff76\051\uff76\001" +
    "\002\000\022\004\uff96\026\uff96\027\uff96\030\uff96\044\uff96" +
    "\046\uff96\047\uff96\053\uff96\001\002\000\022\004\106\026" +
    "\104\027\121\030\117\044\115\046\122\047\105\053\107" +
    "\001\002\000\004\007\227\001\002\000\010\007\uff79\050" +
    "\uff79\051\225\001\002\000\006\007\223\050\222\001\002" +
    "\000\022\006\137\013\124\043\126\052\130\053\107\054" +
    "\135\055\132\056\133\001\002\000\022\004\uff97\026\uff97" +
    "\027\uff97\030\uff97\044\uff97\046\uff97\047\uff97\053\uff97\001" +
    "\002\000\010\007\uff7a\050\uff7a\051\225\001\002\000\022" +
    "\006\137\013\124\043\126\052\130\053\107\054\135\055" +
    "\132\056\133\001\002\000\010\007\uff78\050\uff78\051\uff78" +
    "\001\002\000\022\004\uff95\026\uff95\027\uff95\030\uff95\044" +
    "\uff95\046\uff95\047\uff95\053\uff95\001\002\000\022\004\106" +
    "\026\104\027\121\030\117\044\115\046\122\047\105\053" +
    "\107\001\002\000\024\004\uff94\005\uff94\026\uff94\027\uff94" +
    "\030\uff94\044\uff94\046\uff94\047\uff94\053\uff94\001\002\000" +
    "\026\004\uff99\005\uff99\026\uff99\027\uff99\030\uff99\044\uff99" +
    "\045\233\046\uff99\047\uff99\053\uff99\001\002\000\022\004" +
    "\uff92\026\uff92\027\uff92\030\uff92\044\uff92\046\uff92\047\uff92" +
    "\053\uff92\001\002\000\024\004\uff93\005\uff93\026\uff93\027" +
    "\uff93\030\uff93\044\uff93\046\uff93\047\uff93\053\uff93\001\002" +
    "\000\026\004\uff8b\005\uff8b\026\uff8b\027\uff8b\030\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\053\uff8b\001\002\000\022" +
    "\006\uff5e\013\uff5e\043\uff5e\052\uff5e\053\uff5e\054\uff5e\055" +
    "\uff5e\056\uff5e\001\002\000\022\006\uff60\013\uff60\043\uff60" +
    "\052\uff60\053\uff60\054\uff60\055\uff60\056\uff60\001\002\000" +
    "\022\006\137\013\124\043\126\052\130\053\107\054\135" +
    "\055\132\056\133\001\002\000\022\006\uff5c\013\uff5c\043" +
    "\uff5c\052\uff5c\053\uff5c\054\uff5c\055\uff5c\056\uff5c\001\002" +
    "\000\022\006\uff5f\013\uff5f\043\uff5f\052\uff5f\053\uff5f\054" +
    "\uff5f\055\uff5f\056\uff5f\001\002\000\022\006\uff5b\013\uff5b" +
    "\043\uff5b\052\uff5b\053\uff5b\054\uff5b\055\uff5b\056\uff5b\001" +
    "\002\000\022\006\uff5d\013\uff5d\043\uff5d\052\uff5d\053\uff5d" +
    "\054\uff5d\055\uff5d\056\uff5d\001\002\000\014\007\uff75\012" +
    "\143\013\144\050\uff75\051\uff75\001\002\000\022\004\106" +
    "\026\104\027\121\030\117\044\253\046\122\047\105\053" +
    "\107\001\002\000\004\007\252\001\002\000\006\007\251" +
    "\050\222\001\002\000\022\004\uff80\026\uff80\027\uff80\030" +
    "\uff80\044\uff80\046\uff80\047\uff80\053\uff80\001\002\000\022" +
    "\004\106\026\104\027\121\030\117\044\253\046\122\047" +
    "\105\053\107\001\002\000\004\006\255\001\002\000\026" +
    "\004\uff89\005\uff89\026\uff89\027\uff89\030\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\053\uff89\001\002\000\024\003\217" +
    "\006\137\013\124\043\126\052\130\053\107\054\135\055" +
    "\132\056\133\001\002\000\022\004\106\026\104\027\121" +
    "\030\117\044\253\046\122\047\105\053\107\001\002\000" +
    "\022\004\106\026\104\027\121\030\117\044\253\046\122" +
    "\047\105\053\107\001\002\000\004\045\233\001\002\000" +
    "\026\004\uff8a\005\uff8a\026\uff8a\027\uff8a\030\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\047\uff8a\053\uff8a\001\002\000\010\005" +
    "\uffa5\041\uffa5\053\uffa5\001\002\000\004\015\302\001\002" +
    "\000\024\003\277\006\137\013\124\043\126\052\130\053" +
    "\107\054\135\055\132\056\133\001\002\000\004\015\275" +
    "\001\002\000\026\003\270\006\137\007\uff7e\013\124\043" +
    "\126\052\130\053\107\054\135\055\132\056\133\001\002" +
    "\000\004\007\273\001\002\000\004\007\271\001\002\000" +
    "\004\015\272\001\002\000\026\004\uff8e\005\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\053" +
    "\uff8e\001\002\000\004\015\274\001\002\000\026\004\uff8f" +
    "\005\uff8f\026\uff8f\027\uff8f\030\uff8f\044\uff8f\045\uff8f\046" +
    "\uff8f\047\uff8f\053\uff8f\001\002\000\026\004\uff8d\005\uff8d" +
    "\026\uff8d\027\uff8d\030\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\053\uff8d\001\002\000\010\012\143\013\144\015\301" +
    "\001\002\000\004\015\300\001\002\000\026\004\uff90\005" +
    "\uff90\026\uff90\027\uff90\030\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\053\uff90\001\002\000\026\004\uff91\005\uff91\026" +
    "\uff91\027\uff91\030\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\053\uff91\001\002\000\026\004\uff8c\005\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\053\uff8c" +
    "\001\002\000\024\004\uff9b\005\uff9b\026\uff9b\027\uff9b\030" +
    "\uff9b\044\uff9b\046\uff9b\047\uff9b\053\uff9b\001\002\000\004" +
    "\005\305\001\002\000\026\004\uff82\005\uff82\026\uff82\027" +
    "\uff82\030\uff82\044\uff82\045\uff82\046\uff82\047\uff82\053\uff82" +
    "\001\002\000\024\003\uff81\006\uff81\013\uff81\043\uff81\052" +
    "\uff81\053\uff81\054\uff81\055\uff81\056\uff81\001\002\000\004" +
    "\053\107\001\002\000\010\007\311\010\154\017\156\001" +
    "\002\000\004\015\312\001\002\000\026\004\uff85\005\uff85" +
    "\026\uff85\027\uff85\030\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\053\uff85\001\002\000\024\004\uffb1\005\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\044\uffb1\046\uffb1\047\uffb1\053\uffb1\001" +
    "\002\000\024\004\uffb3\005\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\044\uffb3\046\uffb3\047\uffb3\053\uffb3\001\002\000\006\003" +
    "\320\053\321\001\002\000\024\004\uffb0\005\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\044\uffb0\046\uffb0\047\uffb0\053\uffb0\001" +
    "\002\000\006\004\uffd1\053\uffd1\001\002\000\006\004\336" +
    "\016\335\001\002\000\012\003\uffd8\010\333\015\uffd8\016" +
    "\uffd8\001\002\000\010\003\325\015\326\016\324\001\002" +
    "\000\010\003\uffd5\015\uffd5\016\uffd5\001\002\000\006\003" +
    "\330\053\321\001\002\000\004\015\327\001\002\000\006" +
    "\004\uffd4\053\uffd4\001\002\000\006\004\uffd2\053\uffd2\001" +
    "\002\000\004\004\332\001\002\000\010\003\uffd6\015\uffd6" +
    "\016\uffd6\001\002\000\024\004\uffaf\005\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\044\uffaf\046\uffaf\047\uffaf\053\uffaf\001\002" +
    "\000\004\011\334\001\002\000\010\003\uffd7\015\uffd7\016" +
    "\uffd7\001\002\000\004\053\321\001\002\000\024\004\uffae" +
    "\005\uffae\026\uffae\027\uffae\030\uffae\044\uffae\046\uffae\047" +
    "\uffae\053\uffae\001\002\000\006\015\341\016\340\001\002" +
    "\000\004\053\321\001\002\000\006\004\uffd3\053\uffd3\001" +
    "\002\000\006\007\344\016\343\001\002\000\004\053\013" +
    "\001\002\000\006\004\uffaa\053\uffaa\001\002\000\006\007" +
    "\uffa1\016\uffa1\001\002\000\004\005\uffbf\001\002\000\010" +
    "\005\uffb9\041\uffb9\053\uffb9\001\002\000\010\004\051\005" +
    "\356\015\357\001\002\000\010\003\352\015\353\016\340" +
    "\001\002\000\004\015\354\001\002\000\010\004\uffdb\005" +
    "\uffdb\053\uffdb\001\002\000\010\004\uffda\005\uffda\053\uffda" +
    "\001\002\000\004\005\360\001\002\000\012\004\uffc2\037" +
    "\uffc2\042\uffc2\053\uffc2\001\002\000\010\004\uffd9\005\uffd9" +
    "\053\uffd9\001\002\000\012\004\uffc3\037\uffc3\042\uffc3\053" +
    "\uffc3\001\002\000\010\004\uffcc\005\uffcc\053\013\001\002" +
    "\000\012\004\uffc9\037\uffc9\042\uffc9\053\uffc9\001\002\000" +
    "\012\004\uffca\037\uffca\042\uffca\053\uffca\001\002\000\004" +
    "\053\367\001\002\000\004\015\366\001\002\000\012\004" +
    "\ufff1\037\ufff1\042\ufff1\053\ufff1\001\002\000\004\014\370" +
    "\001\002\000\012\052\373\054\375\055\374\056\372\001" +
    "\002\000\006\015\377\016\376\001\002\000\006\015\ufff5" +
    "\016\ufff5\001\002\000\006\015\ufff7\016\ufff7\001\002\000" +
    "\006\015\ufff4\016\ufff4\001\002\000\006\015\ufff6\016\ufff6" +
    "\001\002\000\004\053\ufff0\001\002\000\012\004\ufff2\037" +
    "\ufff2\042\ufff2\053\ufff2\001\002\000\004\053\u0102\001\002" +
    "\000\006\015\u0107\016\u0106\001\002\000\004\014\u0104\001" +
    "\002\000\006\015\uffed\016\uffed\001\002\000\012\052\373" +
    "\054\375\055\374\056\372\001\002\000\006\015\uffec\016" +
    "\uffec\001\002\000\004\053\u0102\001\002\000\012\004\uffef" +
    "\037\uffef\042\uffef\053\uffef\001\002\000\006\015\uffee\016" +
    "\uffee\001\002\000\004\015\u0127\001\002\000\012\003\u010c" +
    "\010\u010e\015\u010d\016\u010b\001\002\000\004\053\uffe8\001" +
    "\002\000\004\016\uffe6\001\002\000\012\004\uffeb\037\uffeb" +
    "\042\uffeb\053\uffeb\001\002\000\006\003\u0110\011\u010f\001" +
    "\002\000\006\015\u011b\016\u011a\001\002\000\004\016\u0111" +
    "\001\002\000\004\053\u0113\001\002\000\006\015\u0118\016" +
    "\u0117\001\002\000\010\010\u0115\015\uffdd\016\uffdd\001\002" +
    "\000\006\015\uffde\016\uffde\001\002\000\004\011\u0116\001" +
    "\002\000\006\015\uffdc\016\uffdc\001\002\000\004\053\u0113" +
    "\001\002\000\012\004\uffe2\037\uffe2\042\uffe2\053\uffe2\001" +
    "\002\000\006\015\uffdf\016\uffdf\001\002\000\006\015\uffe4" +
    "\053\uffe4\001\002\000\012\004\uffe9\037\uffe9\042\uffe9\053" +
    "\uffe9\001\002\000\006\015\uffe0\053\u0113\001\002\000\006" +
    "\015\uffe1\016\u0117\001\002\000\004\015\u011f\001\002\000" +
    "\012\004\uffe3\037\uffe3\042\uffe3\053\uffe3\001\002\000\004" +
    "\016\u0121\001\002\000\004\053\u0113\001\002\000\006\015" +
    "\u0123\016\u0117\001\002\000\012\004\uffe5\037\uffe5\042\uffe5" +
    "\053\uffe5\001\002\000\004\053\u0113\001\002\000\006\015" +
    "\u0126\016\u0117\001\002\000\012\004\uffe7\037\uffe7\042\uffe7" +
    "\053\uffe7\001\002\000\012\004\uffea\037\uffea\042\uffea\053" +
    "\uffea\001\002\000\010\005\uffba\041\055\053\013\001\002" +
    "\000\004\005\u0136\001\002\000\010\005\uffb6\041\uffb6\053" +
    "\uffb6\001\002\000\004\053\u012e\001\002\000\010\005\uffbb" +
    "\041\055\053\013\001\002\000\010\005\uffb7\041\uffb7\053" +
    "\uffb7\001\002\000\004\006\uffa9\001\002\000\004\006\u0130" +
    "\001\002\000\006\007\uffa3\053\013\001\002\000\006\004" +
    "\uffd0\053\uffd0\001\002\000\024\004\uffa8\005\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\044\uffa8\046\uffa8\047\uffa8\053\uffa8\001" +
    "\002\000\024\004\106\005\uff9c\026\104\027\121\030\117" +
    "\044\115\046\122\047\105\053\107\001\002\000\004\005" +
    "\u0135\001\002\000\010\005\uffa7\041\uffa7\053\uffa7\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\066\006\001\001\000\002\001\001\000\024\003\016" +
    "\004\011\005\007\006\020\012\014\034\017\067\013\073" +
    "\010\101\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\024" +
    "\006\020\012\014\034\017\067\013\073\010\101\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\035\041\036\037\050\034\051\035\052\042\053\036" +
    "\054\033\055\362\057\043\073\032\001\001\000\004\073" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\035\041\036\037\050\034\051\035\052\042\053\036\054" +
    "\033\055\040\057\043\073\032\001\001\000\006\044\322" +
    "\045\350\001\001\000\002\001\001\000\004\056\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\035\046" +
    "\057\045\073\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\052\014\053\073\051\102\055\001\001\000\002" +
    "\001\001\000\010\014\346\073\051\102\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\015\062\016\065\033\064\062\063\063" +
    "\061\073\060\001\001\000\002\001\001\000\004\116\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\072" +
    "\073\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\101\043\102\046" +
    "\100\001\001\000\012\011\316\047\312\064\315\073\314" +
    "\001\001\000\002\001\001\000\020\017\112\020\110\021" +
    "\115\022\107\023\117\070\113\103\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\303\020\110\021" +
    "\115\022\107\023\117\070\113\103\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\021\302\022\107\023" +
    "\117\070\113\103\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\247\026\217\027\212\065\137\072" +
    "\245\074\213\075\133\076\135\103\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\065\137\074\124\075\133\076\135\103\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\075" +
    "\200\076\135\103\126\001\001\000\004\106\144\001\001" +
    "\000\004\073\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\065\137\074\140\075\133\076\135\103\126" +
    "\001\001\000\002\001\001\000\004\106\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\075\145\076\135\103\126\001\001\000\004\107\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\076\152\103\126\001\001\000\002\001\001\000" +
    "\004\117\167\001\001\000\022\024\162\065\137\074\161" +
    "\075\133\076\135\077\160\103\126\104\157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\106\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\065\137\074\161\075\133\076\135" +
    "\077\165\103\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\065\137\074\170\075\133\076\135\103\126" +
    "\001\001\000\004\106\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\065\137\074\175" +
    "\075\133\076\135\103\126\001\001\000\004\106\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\107\151" +
    "\001\001\000\014\065\137\074\202\075\133\076\135\103" +
    "\126\001\001\000\004\106\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\220\026\217" +
    "\027\212\060\215\061\214\065\137\074\213\075\133\076" +
    "\135\103\126\001\001\000\002\001\001\000\006\105\237" +
    "\106\144\001\001\000\002\001\001\000\016\021\230\022" +
    "\107\023\231\070\113\071\227\103\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\026" +
    "\223\027\212\065\137\074\213\075\133\076\135\103\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\027" +
    "\225\065\137\074\213\075\133\076\135\103\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\233\023" +
    "\234\070\113\103\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\065\137" +
    "\074\244\075\133\076\135\103\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\144\001\001\000\010\023\260\070\113\103" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\253\070\113\103\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\220\026\217" +
    "\027\212\060\255\061\214\065\137\074\213\075\133\076" +
    "\135\103\126\001\001\000\012\023\257\070\113\071\256" +
    "\103\111\001\001\000\010\023\234\070\113\103\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\065\137\074\275\075\133\076" +
    "\135\103\126\001\001\000\002\001\001\000\022\024\266" +
    "\065\137\074\161\075\133\076\135\077\160\103\126\104" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\103\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\322\045\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\322" +
    "\045\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\344\073\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\354\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\035" +
    "\041\036\037\050\034\051\035\052\042\053\036\054\033" +
    "\055\361\057\043\073\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\110\377\001\001\000" +
    "\002\001\001\000\006\007\u0100\010\u0102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\u0104\001\001\000\002\001\001\000\004\010\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\u0123\001\001\000\004\112\u011f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\u0111\041\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\u0118\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\113\u011b\001" +
    "\001\000\002\001\001\000\010\037\u011d\040\u011c\041\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\u0121\041\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\u0124\041" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\030\u0128\031\u012b\032\u0129\073\051\102" +
    "\u012a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\u012c\073\051\102\u012a\001\001\000" +
    "\002\001\001\000\004\114\u012e\001\001\000\002\001\001" +
    "\000\016\015\062\016\065\033\064\062\063\063\u0130\073" +
    "\060\001\001\000\010\042\101\043\u0131\046\100\001\001" +
    "\000\004\115\u0132\001\001\000\020\017\u0133\020\110\021" +
    "\115\022\107\023\117\070\113\103\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) {}
		//log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	
	boolean foundMainFunction = false;
	boolean exitedFromMainFunction = false;
	
	Logger log = Logger.getLogger(getClass());
   
   	int localVCnt = 0;
   	int globalVCnt = 0;
   	int globalConst = 0;
   	int globalArray = 0;
   	int functionCnt = 0;
   	int blockCnt = 0;
   	int formParamCnt = 0;
   	int functionCallCnt = 0;
   	int classCnt = 0;
   	int classMethCnt = 0;
   	int classFieldCnt;
   	
   	int globalVdecl=0;
    int localVdecl=0;
    
    boolean errorFound = false;
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        
    }

    public void report_error(String message, Object info) {
    	errorFound = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        System.err.println(msg.toString());
        //log.error(msg.toString());
    }
    
     public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        System.out.println(msg.toString());
        //log.info(msg.toString());
    }
    


    
   
	
    public void dump() {
    	Tab.dump(new CustomDumpSymbolTableVisitor() );
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {



	Struct currentConstType = null;
	
	Obj currentTypeObj = null;
	
	Struct currentGlobalType = null;

	Struct currentLocalType = null;
	
	boolean returnFound = false;

	Struct currentRetType = null;

	Obj currentMethod = null;

	boolean fieldDeclIA = false;
	boolean classMethIA = false;

	boolean checkType(Struct src, Struct dst, int line, String name) {
		if(src == null) return false;
		if(dst.equals(src)) {
			return true;
		}
		else {
			parser.report_error("Semanticka greska na liniji: " + line + " neodgovarajuci tip ", null);
			return false;
		}
	
	}
	
	Obj addGlobalVar(int kind, String name, Struct type, int line) {
		Obj temp = Tab.currentScope().findSymbol(name);
		if(temp != null) {
			if(temp.getKind() != kind) {
				Obj ttemp = Tab.insert(kind, name, type);
				CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
				visit.visitObjNode(ttemp);
				String nodeDesc = visit.getOutput();
				parser.report_info("Semantika: Globalna promenjljiva " + name + " definisana na liniji  " + line + " " + nodeDesc,null);
				
				
				
			}
			else {
				parser.report_error("Semanticka greska na liniji " + line + " Globalna promenjljiva " + name + " vec deklarisana!", null);
				parser.globalVCnt--;
			}			
		}
		else {
			temp = Tab.insert(kind, name, type);
			CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
				visit.visitObjNode(temp);
				String nodeDesc = visit.getOutput();
				parser.report_info("Semantika: Globalna promenjljiva " + name + " definisana na liniji  " + line + " " + nodeDesc,null);		
		}
		return temp;
	}

	Obj addLocalVar(int kind, String name, Struct type, int line) {
		Obj temp = Tab.currentScope().findSymbol(name);
		if(temp != null) {
			if(temp.getKind() != kind) {
				Obj ttemp = Tab.insert(kind, name, type);
				CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
				visit.visitObjNode(ttemp);
				String nodeDesc = visit.getOutput();
				parser.report_info("Semantika: Lokalna promenjljiva " + name + " definisana na liniji  " + line + " " + nodeDesc,null);
				
				
				
			}
			else {
				parser.report_error("Semanticka greska na liniji " + line + " Lokalna promenjljiva " + name + " vec deklarisana!", null);
				parser.localVCnt--;
			}			
		}
		else {
			Obj tempt = Tab.insert(kind, name, type);
			
			if(type == null){
				parser.report_info("NULLLL",null);
			}
			CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
				visit.visitObjNode(tempt);
				String nodeDesc = visit.getOutput();
				parser.report_info("Semantika: Lokalna promenjljiva " + name + " definisana na liniji  " + line + " " + nodeDesc,null);		
		}
		return temp;
	}


  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Mulop ::= PERCENTAGE 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.rem); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.div); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.mul); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.sub); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Addop ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.add); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Relop ::= IS_LESS_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.le); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relop ::= IS_LESS 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.lt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relop ::= IS_GREATER_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ge); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Relop ::= IS_GREATER 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.gt); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Relop ::= IS_DIFFERENT 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.ne); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Relop ::= IS_EQUAL 
            {
              Integer RESULT =null;
		 RESULT = new Integer(Code.eq); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int desiNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desiNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String desiName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							boolean found = false;
							RESULT = Tab.noObj;
							Obj temp = Tab.currentScope().findSymbol(desiName);
							if(temp != null) {								
								RESULT = temp;
								
							}	
							else{
								if(currentMethod == null){
									parser.report_error("Semanticka greska na liniji: " + desiNameleft + " Identifikator " + desiName + " se koristi a nije deklarisan", null);
								}
								else{
									Scope outer = Tab.currentScope().getOuter();
									temp = outer.findSymbol(desiName);

									if(temp!= null){
										RESULT = temp;
									}
									else
										parser.report_error("Semanticka greska na liniji: " + desiNameleft + " Identifikator " + desiName + " se koristi a nije deklarisan", null);
								}
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator ::= Designator LINDEX error RINDEX 
            {
              Obj RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.report_error("Sintaksna greska Greska pri indeksiranju niza na liniji: " + lleft, null); 
							RESULT = Tab.noObj;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= Designator LINDEX NT$7 Expr RINDEX 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int type1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj type1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(!Tab.intType.equals(type2)) {
								parser.report_error("Semanticka greska na liniji: " + type2left + " izraz u [] mora biti tipa int!", null);
							}																				
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$7 ::= 
            {
              Obj RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj type1 = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

							RESULT = Tab.noObj;
							if(type1 != Tab.noObj) {
								if(type1.getType().getKind() != Struct.Array) {
									parser.report_error("Semanticka greska na liniji: " + type1left + " Identifikator " + type1.getName() + " mora biti niz!", null);
								}
								else {
									RESULT = new Obj(Obj.Elem, "irrelevant", type1.getType().getElemType());
									Code.load(type1);
								}
							}	
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$7",77, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Designator ::= Designator DOT IDENT 
            {
              Obj RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Factor ::= LPAREN Expr RPAREN 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
							if(type != Tab.noType) {
								RESULT = type;
							}
							else RESULT = Tab.noType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Factor ::= NEW Type LINDEX Expr RINDEX 
            {
              Struct RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct type1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
							RESULT = Tab.noType;
							if(type1 != Tab.noType && type2 != Tab.noType) {
								if(Tab.intType.equals(type2)) {
									RESULT = new Struct(Struct.Array, type1);
									Code.put(Code.newarray);
									if(type1 == Tab.charType) {
										Code.put(0);
									}
									else {
										Code.put(1);
									}
								}
								else {
									parser.report_error("Semanticka greska na liniji: " + type2left + " Izraz u [] mora biti tipa int!", null);
								}	
							}													
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Factor ::= NEW Type 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Factor ::= BOOL_CONST 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj o = Tab.insert(Obj.Con, "", new Struct(Struct.Bool));
							o.setAdr(b.booleanValue() ? 1: 0);
							Code.load(o);
							RESULT = new Struct(Struct.Bool);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Factor ::= STR_CONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Factor ::= CHAR_CONST 
            {
              Struct RESULT =null;
		int c_constleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int c_constright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character c_const = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj c = Tab.insert(Obj.Con, "", Tab.charType);
							c.setAdr(c_const.charValue());
							Code.load(c);
							RESULT = Tab.charType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj c = Tab.insert(Obj.Con, "", Tab.intType);
							c.setAdr(n.intValue());
							Code.load(c);
							RESULT = Tab.intType; 
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Factor ::= Designator LPAREN ActParsListW RPAREN 
            {
              Struct RESULT =null;
		int desileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj desi = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
							if(desi!=Tab.noObj && (desi.getKind() == Obj.Meth)){
								
								RESULT = desi.getType();
								if(currentMethod.getName().equals("main")){
									parser.functionCallCnt++;

									DumpSymbolTableVisitor visit = new DumpSymbolTableVisitor();
									visit.visitObjNode(desi);
									String nodeDesc = visit.getOutput();
									parser.report_info("Semantika: Upotreba funkcije " + desi.getName() + " unutar main funkcije na liniji " + desileft + " -- " + nodeDesc, null);	
								}

							}
							else{
							 parser.report_error("Semanticka greska na linji: " + desileft + " Identifikator " +  desi.getName() + " ne predstavlja funkciju", null);
							 RESULT = Tab.noType;
							 }
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							if(d != Tab.noObj) {
								RESULT = d.getType();
							}
							else RESULT = Tab.noType;

							Code.load(d);

						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							RESULT = t;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int firstEleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int firstEright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct firstE = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int secondEleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int secondEright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct secondE = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							
							if(firstE != Tab.noType && secondE != Tab.noType) {
								if(firstE.getKind() == Struct.Int && secondE.getKind() == Struct.Int) {
									RESULT = firstE;
									Code.put(op.intValue());
								}
								else {
									parser.report_error("Semanticka greska na liniji: " + firstEleft + " Oba operanda moraju biti tipa int pri operacijama mnozenja i deljenja", null);
									RESULT = Tab.noType;
								}
							}							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr ::= PNExpr 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
		 					RESULT = type;
		 				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr ::= Expr Addop Term 
            {
              Struct RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer oper = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(type1 != Tab.noType && type2 != Tab.noType) {
								if(type1.getKind() == Struct.Int && type2.getKind() ==Struct.Int) {
									RESULT = Tab.intType;
									Code.put(oper.intValue());
								}
								else {
									parser.report_error("Semanticka greska na liniji: " + type1left + " Oba operanda moraju biti tipa int pri operaciji sabiranja", null);
									RESULT = Tab.noType;
								}
						}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PNExpr ::= Term 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							RESULT = type;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PNExpr",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PNExpr ::= MINUS Term 
            {
              Struct RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							
							if(type.getKind() != Struct.Int) {
								RESULT = Tab.noType;
								parser.report_error("Semanticka greska na liniji: " + typeleft + " Minus se moze koristiti uz podatak tipa int!", null);
							}
							else {
								RESULT = type;
								Code.put(Code.neg);
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PNExpr",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // CondFact ::= Expr Relop Expr 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // CondFact ::= Expr 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CondTerm ::= CondFact 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CondTerm ::= CondTerm LOGICAL_AND CondFact 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Condition ::= CondTerm 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Condition ::= Condition LOGICAL_OR CondTerm 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ActPars ::= Expr 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ActParsList ::= ActPars 
            {
              Struct[] RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ActParsList ::= ActParsList COMMA ActPars 
            {
              Struct[] RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsList",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ActParsListW ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListW",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ActParsListW ::= ActParsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsListW",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ConditionRPAREN1 ::= Condition RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionRPAREN1",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WhileLPAREN ::= WHILE LPAREN 
            {
              Integer RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileLPAREN",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Matched ::= LBRACE StatementListW RBRACE 
            {
              Object RESULT =null;
		
			  				parser.blockCnt++;
			  			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Matched ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			 				if(type != Tab.noType) {
			 					if(!(Tab.intType.equals(type) || Tab.charType.equals(type) || type.getKind() == Struct.Bool
			 						|| (type.getKind() == Struct.Array && type.getElemType().getKind() == Struct.Char))) {
			 					
			 						parser.report_error("Semanticka greska na liniji: " + typeleft + " Tip izraza za PRINT funkciju mora biti int, char, bool ili string!", null);			 					
			 					}
			 					else {
			 						if(type == Tab.intType || type.getKind() == Struct.Bool) {
			 							Code.loadConst(num.intValue());
			 							Code.put(Code.print);
			 						}
			 						if(type == Tab.charType) {
			 							Code.loadConst(num.intValue());
			 							Code.put(Code.bprint);
			 						}
			 					}	
			 				}			 				
			 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Matched ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			 				if(type != Tab.noType) {
			 					if(!(Tab.intType.equals(type) || Tab.charType.equals(type) || type.getKind() == Struct.Bool
			 						|| (type.getKind() == Struct.Array && type.getElemType().getKind() == Struct.Char))) {
			 					
			 						parser.report_error("Semanticka greska na liniji: " + typeleft + " Tip izraza za PRINT funkciju mora biti int, char, bool ili string!", null);			 					
			 					}
			 					else {
			 						if(type == Tab.intType || type.getKind() == Struct.Bool) {
			 							Code.loadConst(5);
			 							Code.put(Code.print);
			 						}
			 						if(type == Tab.charType) {
			 							Code.loadConst(1);
			 							Code.put(Code.bprint);
			 						}
			 					}	
			 				}			 				
			 			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Matched ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj desi = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
			  			if(desi != Tab.noObj) {
			  					if(!(desi.getKind() == Obj.Var || desi.getKind() == Obj.Elem || desi.getKind() == Obj.Fld)) {
			  						parser.report_error("Semanticka greska na liniji: " + desileft + " Identifikator " + desi.getName() + " mora biti promenljiva, element niza ili polje klase!", null);
			  					}
			  					else {
			  						if(!(Tab.intType.equals(desi.getType()) || Tab.charType.equals(desi.getType()) || desi.getType().getKind() == Struct.Bool) ) {
			  						
			  							parser.report_error("Semanticka greska na liniji: " + desileft + " Identifikator " + desi.getName() + " mora biti tipa int, char ili  bool!", null);
			  						}
			  						else {
			  							if(desi.getType() == Tab.intType || desi.getType().getKind() == Struct.Bool) {
			  								Code.put(Code.read);
			  								Code.store(desi);
			  							}
			  							if(desi.getType() == Tab.charType) {
			  								Code.put(Code.bread);
			  								Code.store(desi);
			  							}
			  						}
			  					}
			  				}
			  			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Matched ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						  	 returnFound = true;
							 Struct currMethType = currentMethod.getType();
							 if (!currMethType.compatibleWith(t)) {
							 	parser.report_error("Semanticka greska na liniji " + tleft + " : " + "tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije " + currentMethod.getName(), null);
							 }	
							 else {
			  					Code.put(Code.exit);
			  					Code.put(Code.return_);
			  				}		  	 
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Matched ::= RETURN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			  			if(currentMethod != null && !Tab.noType.equals(currentMethod.getType())) {
			  					parser.report_error("Semanticka greska na linji: " + lleft + " Povratni tip funkcije nije void!", null);
			  				}
			  				else {
			  					Code.put(Code.exit);
			  					Code.put(Code.return_);
			  				}
			  			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Matched ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Matched ::= WhileLPAREN error RPAREN Matched 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Sintaksna greska Greska u WHILE uslovu na liniji: " + lleft, null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Matched ::= WhileLPAREN ConditionRPAREN1 Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Matched ::= IF LPAREN ConditionRPAREN MatchedELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Matched ::= Designator DECREMENT SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
							if(d != Tab.noObj) {
									if(!d.getType().equals(Tab.intType)) {
										parser.report_error("Semanticka greska na liniji: " + dleft + " Identifikator " + d.getName() + " mora biti tipa int!", null);
									}
									else {
										Code.load(d);
										Code.loadConst(1);
										Code.put(Code.sub);
										Code.store(d);
									}
								
							}							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Matched ::= Designator INCREMENT SEMI 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
							if(d != Tab.noObj) {
									if(!d.getType().equals(Tab.intType)) {
										parser.report_error("Semanticka greska na liniji: " + dleft + " Identifikator " + d.getName() + " mora biti tipa int!", null);
									}
									else {
										if (d.getKind() == Obj.Elem)
                                         {
                                             Code.put(Code.dup2);
                                         }
									
										Code.load(d);
										Code.loadConst(1);
										Code.put(Code.add);
										Code.store(d);
									}
								
							}							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Matched ::= Designator LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri pozivu metode: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Matched ::= Designator LPAREN ActParsListW RPAREN SEMI 
            {
              Object RESULT =null;
		int desileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int desiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj desi = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
							if(desi!=Tab.noObj && (desi.getKind() == Obj.Meth)){
								
								RESULT = desi.getType();
								if(currentMethod.getName().equals("main")){
									parser.functionCallCnt++;

									CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
									visit.visitObjNode(desi);
									String nodeDesc = visit.getOutput();
									parser.report_info("Semantika: Upotreba funkcije " + desi.getName() + " unutar main funkcije na liniji " + desileft + " -- " + nodeDesc, null);	
								}

							}
							else
							 parser.report_error("Semanticka greska na linji: " + desileft + " Identifikator " +  desi.getName() + " ne predstavlja funkciju", null);
							 RESULT = Tab.noType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Matched ::= Designator EQUAL error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri dodeli vrednosti na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Matched ::= Designator EQUAL Expr SEMI 
            {
              Object RESULT =null;
		int desileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desiright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj desi = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct type = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
			
							if(desi != Tab.noObj && type != Tab.noType) {
								if(!(desi.getKind() == Obj.Var || desi.getKind() == Obj.Elem || desi.getKind() == Obj.Fld)) {
									parser.report_error("Semanticka greska na linji: " + desileft + " Identifikator " + desi.getName() + " mora biti promenljiva, element niza ili polje klase!", null);
								}
								else {
									
									if(!(desi.getType().assignableTo(type) || (type.getKind() == Struct.Bool && desi.getType().getKind() == Struct.Bool)  )) {
										parser.report_error("Semanticka greska na linji: " + typeleft + " Tip leve strane se ne moze dodeliti desnoj strani " + desi.getName(), null);
									}
									else {
										
											Code.store(desi);
																					
									}																		
								}
							}
							else {
								if(type == Tab.noType) {
									parser.report_error("Semanticka greska na linji: " + typeleft + " Tip desne vrednosti ne sme biti void", null);
								}
							}	
							
											
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MatchedELSE ::= Matched ELSE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MatchedELSE",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Unmatched ::= IF LPAREN ConditionRPAREN MatchedELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Unmatched ::= IF LPAREN ConditionRPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CondRPARENerror ::= error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska u IF uslovu na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondRPARENerror",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ConditionRPAREN ::= CondRPARENerror 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionRPAREN",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ConditionRPAREN ::= Condition RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConditionRPAREN",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // StatementListW ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListW",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // StatementListW ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListW",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FormalParamDecl ::= Type IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		
							parser.formParamCnt++;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FormalParamDecl ::= Type IDENT 
            {
              Object RESULT =null;
		
							parser.formParamCnt++;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FormalParamList ::= FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FormalParamList ::= Type error COMMA FormalParamDecl 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Sintaksna greska Greska pri deklarisanju formalnih parametara na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FormalParamList ::= FormalParamList COMMA FormalParamDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FormPars ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FormPars ::= FormalParamList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MethodDecl ::= ReturnValue IDENT LPAREN FormParsRPAREN NT$6 VDListLBRACE StatementListW RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
							parser.classMethCnt++;
							classMethIA = false;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$6 ::= 
            {
              Object RESULT =null;
 classMethIA = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$6",76, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FunctionDecl ::= ReturnValue IDENT NT$4 LPAREN FormParsRPAREN VDListLBRACE NT$5 StatementListW RBRACE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		if(fName.equals("main"))
							parser.exitedFromMainFunction = true;
							
						if(!returnFound && currentRetType != Tab.noType)
			   	 			parser.report_error("Semanticka greska na liniji " + fNameleft + " Funkcija " + fName + " nema return iskaz!", null);
				 
				 			

				 		Code.put(Code.exit);
				 		Code.put(Code.return_);

						Tab.chainLocalSymbols(currentMethod);
			   	 		Tab.closeScope();
			   	 		
			   	 		returnFound = false;
				 		currentMethod = null;
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;

							currentMethod.setAdr(Code.pc);
			   				if("main".equals(fName)) 
			   					Code.mainPc = currentMethod.getAdr();
			   		
			   				Code.put(Code.enter);
			   				Code.put(currentMethod.getLevel());
			   				Code.put(Tab.currentScope().getnVars());
			   			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",75, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$4 ::= 
            {
              Object RESULT =null;
		int fNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int fNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String fName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
if(fName.equals("main"))
							parser.foundMainFunction = true;
							currentMethod = Tab.insert(Obj.Meth, fName, currentRetType);
			   				Tab.openScope();
			   				parser.functionCnt++;
			   				parser.report_info("Semantika: Obradjuje se funkcija " +fName + " na liniji " + fNameleft, null);

						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",74, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FormParsError ::= Type error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri deklarisanju formalnih parametara na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsError",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FormParsError ::= FormalParamList COMMA error RPAREN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri deklarisanju formalnih parametara na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsError",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FormParsRPAREN ::= FormParsError 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsRPAREN",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FormParsRPAREN ::= FormPars RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsRPAREN",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VarDeclListError ::= Type error LBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri definiciji lokalne promenljive na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListError",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VarDeclListError1 ::= Type VarDeclInnerList COMMA error LBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri definiciji lokalne promenljive na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclListError1",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DeclListErrorLBRACE ::= VarDeclList VarDeclListError1 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclListErrorLBRACE",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DeclListErrorLBRACE ::= VarDeclList VarDeclListError 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclListErrorLBRACE",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VDListLBRACE ::= DeclListErrorLBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VDListLBRACE",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VDListLBRACE ::= VarDeclList LBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VDListLBRACE",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ReturnValue ::= VOID 
            {
              Struct RESULT =null;
		
							currentRetType = Tab.noType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnValue",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ReturnValue ::= Type 
            {
              Struct RESULT =null;
		int typeValleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeValright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct typeVal = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							currentRetType = typeVal;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ReturnValue",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FunctionDeclList ::= FunctionDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FunctionDeclList ::= FunctionDeclList FunctionDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FunctionDeclListW ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclListW",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FunctionDeclListW ::= FunctionDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FunctionDeclListW",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							Obj typeNode = Tab.find(typeName);
							if(typeNode == Tab.noObj) {
								parser.report_error("Semanticka greska na liniji " + typeNameleft + " Identifikator tipa " + typeName + " nije pronadjen" , null);
								RESULT = Tab.noType;
							}
							else {
								if(typeNode.getKind() == Obj.Type) {
									RESULT = typeNode.getType();
									currentTypeObj = typeNode;
									currentLocalType = typeNode.getType();
								}
								else {
									parser.report_error("Semanticka greska na liniji: " + typeNameleft + " Identifikator tipa " + typeName + " nije tip!", null);
									currentTypeObj = null;
									RESULT = Tab.noType;
								}
							}
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ITC_withoutMethod ::= FieldDeclListW 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ITC_withoutMethod",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ITC_withMethod ::= FieldDeclListW MethodDLWrap 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ITC_withMethod",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MethodDLWrap ::= LBRACE MethodDeclList RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDLWrap",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // InTheClassNoError ::= ITC_withoutMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassNoError",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // InTheClassNoError ::= ITC_withMethod 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassNoError",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ErrorPart ::= Type error RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ErrorPart",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ErrorPart ::= Type error MethodDLWrap RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Sintaksna greska Greska pri deklaraciji polja klase na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ErrorPart",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // InTheClassError ::= ErrorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassError",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // InTheClassError ::= FieldDeclList ErrorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassError",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // InTheClassRBRACE ::= InTheClassNoError RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassRBRACE",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // InTheClassRBRACE ::= InTheClassError 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("InTheClassRBRACE",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ClassDecl ::= ClassIDENT EXTENDS error LBRACE InTheClassRBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.report_error("Sintaksna greska Greska pri Definisanju prosirenja natklase na liniji: " + lleft, null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ClassDecl ::= ClassIDENT EXTENDS Type LBRACE InTheClassRBRACE 
            {
              Object RESULT =null;
		
							parser.classCnt++;
							fieldDeclIA = false;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassDecl ::= ClassIDENT LBRACE InTheClassRBRACE 
            {
              Object RESULT =null;
		
							parser.classCnt++;
							fieldDeclIA = false;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassIDENT ::= CLASS IDENT 
            {
              String RESULT =null;
		 fieldDeclIA = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassIDENT",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FieldDeclListW ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListW",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FieldDeclListW ::= FieldDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclListW",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FieldDeclList ::= FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldDeclList ::= FieldDeclList FieldDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VarDeclList ::= VarDeclList VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VarDecl ::= Type VarDeclInnerList error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri definiciji lokalne promenljive na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VarDecl ::= Type error COMMA VarDeclInnerList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VarDecl ::= Type VarDeclInnerList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclInnerList ::= VarDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclInnerList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclInnerList ::= VarDeclInnerList COMMA VarDeclPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclInnerList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VarDeclPart ::= IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		int lVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String lVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
							if(parser.foundMainFunction && !parser.exitedFromMainFunction)
							parser.localVCnt++;

							addLocalVar(Obj.Var, lVarName, new Struct(Struct.Array, currentLocalType), lVarNameleft);

							if(fieldDeclIA)
								parser.classFieldCnt++;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VarDeclPart ::= IDENT 
            {
              Object RESULT =null;
		int lVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String lVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 if(parser.foundMainFunction && !parser.exitedFromMainFunction)
							parser.localVCnt++;
							addLocalVar(Obj.Var, lVarName, currentLocalType, lVarNameleft);
							if(fieldDeclIA == true)
								parser.classFieldCnt++;
						
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclPart",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FieldDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri deklaraciji polja klase na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FieldDecl ::= Type VarDeclInnerList error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri deklaraciji polja klase na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FieldDecl ::= Type VarDeclInnerList SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDecl",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GVarDeclAfterComa ::= IDENT LINDEX RINDEX 
            {
              Object RESULT =null;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.globalArray++;
							addGlobalVar(Obj.Var, globVarName, new Struct(Struct.Array, currentGlobalType), globVarNameleft);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclAfterComa",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GVarDeclAfterComa ::= IDENT 
            {
              Object RESULT =null;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.globalVCnt++;
							addGlobalVar(Obj.Var, globVarName, currentGlobalType, globVarNameleft);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclAfterComa",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GVarDeclList1 ::= GVarDeclAfterComa 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclList1",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GVarDeclList1 ::= GVarDeclList1 COMMA GVarDeclAfterComa 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclList1",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GVarDeclList1W ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclList1W",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GVarDeclList1W ::= GVarDeclList1 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GVarDeclList1W",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GlobVarDecl ::= Type IDENT LINDEX error COMMA GVarDeclList1 SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GlobVarDecl ::= Type IDENT LINDEX RINDEX COMMA NT$3 GVarDeclList1W SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		
							currentGlobalType = null;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Object RESULT =null;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
 parser.globalArray++;
							addGlobalVar(Obj.Var, globVarName, new Struct(Struct.Array, globVarType), globVarNameleft);
							currentGlobalType = globVarType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GlobVarDecl ::= Type IDENT error NT$2 COMMA GVarDeclList1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.report_error("Sintaksna greska Greska pri definiciji globalne promenljive na liniji: " + ileft, null);  
							currentGlobalType = globVarType;
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GlobVarDecl ::= Type IDENT COMMA NT$1 GVarDeclList1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
							currentGlobalType = null;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              Object RESULT =null;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.globalVCnt++;
							addGlobalVar(Obj.Var, globVarName, globVarType, globVarNameleft);
							currentGlobalType = globVarType;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobVarDecl ::= Type IDENT LINDEX RINDEX SEMI 
            {
              Object RESULT =null;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		 parser.globalArray++;
							addGlobalVar(Obj.Var, globVarName, new Struct(Struct.Array, globVarType), globVarNameleft);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobVarDecl ::= Type error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.report_error("Sintaksna greska Greska pri definiciji globalne promenljive na liniji: " + lleft, null);  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobVarDecl ::= Type IDENT SEMI 
            {
              Object RESULT =null;
		int globVarTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int globVarTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct globVarType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int globVarNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int globVarNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String globVarName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.globalVCnt++;
							addGlobalVar(Obj.Var, globVarName, globVarType, globVarNameleft);
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobVarDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ConstDeclAfterComa ::= IDENT EQUAL RValues 
            {
              Object RESULT =null;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int cValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj cValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.globalConst++;
							if(checkType(cValue.getType(), currentConstType, cNameleft, cName)){
								Obj temp = Tab.find(cName);
								if(temp == Tab.noObj) {
									temp = Tab.insert(Obj.Con, cName, currentConstType);
									temp.setAdr(cValue.getAdr());
									
									CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
									visit.visitObjNode(temp);
									String nodeDesc = visit.getOutput();
									parser.report_info("Semantika: Konstanta " + cName + " definisana na: " + cNameleft + " -- " + nodeDesc, null);		
								}
								else {
									parser.report_error("Semanticka greska na linji" + cNameleft + " Konstanta " + cName + " vec definisana!",null);
									
								}
							}							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclAfterComa",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ConstDeclList1 ::= ConstDeclAfterComa 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList1",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ConstDeclList1 ::= ConstDeclList1 COMMA ConstDeclAfterComa 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclList1",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ConstDecl ::= ConstNTerminal Type IDENT EQUAL RValues COMMA NT$0 ConstDeclList1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int cTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int cTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Struct cType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int cValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj cValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
							currentConstType = null;
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
		int cTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct cType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj cValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
 parser.globalConst++;
							if(checkType(cValue.getType(), cType, cNameleft, cName)){
								Obj temp = Tab.find(cName);
								if(temp == Tab.noObj) {
									temp = Tab.insert(Obj.Con, cName, cType);
									temp.setAdr(cValue.getAdr());
									CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
									visit.visitObjNode(temp);
									String nodeDesc = visit.getOutput();
									parser.report_info("Semantika: Konstanta " + cName + " definisana na: " + cNameleft + " -- " + nodeDesc, null);		
								}
								else {
									parser.report_error("Semanticka greska na linji" + cNameleft + " Konstanta " + cName + " vec definisana!",null);
									
								}
							}
							currentConstType = cType;
							
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= ConstNTerminal error SEMI 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 this.parser.report_error("Sintaksna greska: Konstanta na linji : " + lleft + "mora biti inicijalizovana", null); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= ConstNTerminal Type IDENT EQUAL RValues SEMI 
            {
              Object RESULT =null;
		int cTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int cTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Struct cType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int cNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int cNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String cName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int cValueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int cValueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj cValue = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.globalConst++;
							if(checkType(cValue.getType(), cType , cNameleft, cName)){
								Obj temp = Tab.find(cName);
								if(temp == Tab.noObj) {
									temp = Tab.insert(Obj.Con, cName, cType);
									temp.setAdr(cValue.getAdr());
									
									CustomDumpSymbolTableVisitor visit = new CustomDumpSymbolTableVisitor();
									visit.visitObjNode(temp);
									String nodeDesc = visit.getOutput();
									parser.report_info("Semantika: Konstanta " + cName + " definisana na: " + cNameleft + " -- " + nodeDesc, null);		
								}
								else {
									parser.report_error("Semanticka greska na linji" + cNameleft + " Konstanta " + cName + " vec definisana!",null);
									
								}
							}
							currentConstType = null;
							

						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstNTerminal ::= CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstNTerminal",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RValues ::= STR_CONST 
            {
              Obj RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, string, Tab.find("string").getType(), 0, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RValues",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RValues ::= BOOL_CONST 
            {
              Obj RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean bool = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, "irrelevant", Tab.find("bool").getType(), bool.booleanValue()?1:0, 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RValues",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RValues ::= CHAR_CONST 
            {
              Obj RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, "irrelevant", Tab.charType, ch.charValue() , 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RValues",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RValues ::= NUMBER 
            {
              Obj RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Obj(Obj.Con, "irrelevant", Tab.intType, num.intValue(), 0); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RValues",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Decl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= GlobVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Decl",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclList ::= Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DeclList ::= DeclList Decl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DList ::= DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		  

	Tab.insert(Obj.Type, "string", new Struct(Struct.Array, Tab.charType));
	Tab.insert(Obj.Type, "bool", new Struct(Struct.Bool));

	RESULT = Tab.insert(Obj.Prog, pName, Tab.noType);
	
	 Tab.find("ord").setAdr(Code.pc);    
        					 Code.put(Code.enter);                     
        					 Code.put(1);                        //  int ord(char c)
        					 Code.put(1);                        //  {  
        					 Code.put(Code.load_n);              //      return c;
        					 Code.put(Code.exit);
        					 Code.put(Code.return_);
        					 
        					 Tab.find("chr").setAdr(Code.pc);
        					 Code.put(Code.enter);
        					 Code.put(1);                        //  char chr(int x)
        					 Code.put(1);                        //  {
        					 Code.put(Code.load_n);              //      return x % 128;
        					 Code.loadConst(128);                
        					 Code.put(Code.rem);
        					 Code.put(Code.exit);                //  }
        					 Code.put(Code.return_);
							
							Tab.find("len").setAdr(Code.pc);
       						Code.put(Code.enter);                 
        					Code.put(1);                        //  int len(array x)
       						Code.put(1);                        //  {
        					Code.put(Code.load_n);              //      return x.len;
        					Code.put(Code.arraylength);         
        					Code.put(Code.exit);                
        					Code.put(Code.return_); 
							
	
	Tab.openScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgName",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROG ProgName DList LBRACE FunctionDeclListW RBRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	
	if(!parser.foundMainFunction)
		parser.report_error("Semanticka greska , MAIN funkcija nije pronadjena", null);

	Code.dataSize = Tab.currentScope().getnVars();

	Tab.chainLocalSymbols(p);
	Tab.closeScope(); 

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

